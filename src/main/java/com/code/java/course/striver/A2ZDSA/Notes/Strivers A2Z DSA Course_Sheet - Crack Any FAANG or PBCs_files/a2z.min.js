// let bitlyLinkCount = 0;
// function countNumberOfLinks(csLinks, lcLinks) 
// {
//     let countCSLinks = 0, leetcodeCount = 0, bitlyCount = 0, geeksforgeeksCount = 0;

//     const pattern = /www\.codingninjas\.com/;
//     const leetcodePattern = /https:\/\/leetcode\.com/;
//     const bitlyPattern = /https:\/\/bit\.ly/;
//     const geeksforgeeksPattern = /https:\/\/practice\.geeksforgeeks\.org/;
    
//     csLinks.forEach(link => {
//         if (link) {
//             if(pattern.test(link)) {
//                 countCSLinks++;
//             }
//             if (bitlyPattern.test(link)) {
//                 bitlyCount++;
//             }
//         }
//     });
    
    
//     lcLinks.forEach(link => {
//         if (link) {
//             if (leetcodePattern.test(link)) {
//                 leetcodeCount++;
//             }
//             if(pattern.test(link)) {
//                 countCSLinks++;
//             }
//             if (bitlyPattern.test(link)) {
//                 bitlyCount++;
//             }
//             if (geeksforgeeksPattern.test(link)) {
//                 geeksforgeeksCount++;
//             }
//         }
//     });
    
//     return {countCSLinks, leetcodeCount, bitlyCount, geeksforgeeksCount}
// }

// function codingNinjasLcLinks(data, parentContainer){
//     const { csLinks, lcLinks } = data;
    
//     const {countCSLinks, leetcodeCount, bitlyCount, geeksforgeeksCount} = countNumberOfLinks(csLinks, lcLinks)
//     // console.log(bitlyCount)
    
// }

// function removeExtraColumns() {


//     const links = document.querySelectorAll("table tbody tr td a");
//     links.forEach((link) => {
//       const href = link.getAttribute("href");
      
//       if (href && href.startsWith("https://bit.ly/")) {
//         bitlyLinkCount++;
//       }
//     });
    
//     console.log("Total bit.ly links:", bitlyLinkCount);
// }

// var interval = setInterval(removeExtraColumns, 5000);

window.addEventListener("load", async () => {
  var a, b;
  try {
    document
      .querySelectorAll(
        "div.entry-content > #dsa_sheets_problems_table_row_details"
      )
      .forEach((a, b) => {
        18 > b && a.remove();
      });
    //   /api/singletopic/single/a2z?topicName=strivers_a2z_sheet
    const c = await fetch(`${baseUrl}/api/singletopic/single/a2z?topicName=strivers_a2z_sheet`, {
        credentials: "include"
      }),
      d = await c.json();
    //   console.log(d);
    // codingNinjasLcLinks(d)
    
    if (200 === c.status && d.status) {
      const c = document.getElementById("render-questions");
      if (c) {
        const e = c.querySelector("#new-loader");
        e && e.remove();
        const { data: f, credentials: g } = d;
        g || localStorage.removeItem("__is_logged_in");
        const h = document.getElementById("tags-modal");
        if (h) {
          const a = h.querySelector("button.tags__close");
          a.addEventListener("click", () => {
            (document.body.style.overflow = ""), h.classList.remove("show");
          });
        }
        const i = document.getElementById("yt-modal");
        if (i) {
          const a = i.querySelector("button.yt-sol__close");
          a.addEventListener("click", () => {
            (document.body.style.overflow = "auto"), i.classList.remove("show");
            const a = i.querySelector("iframe");
            a.src = "";
          });
        }
        const j = document.getElementById("notes-modal");
        if (j) {
          const a = j.querySelector("button#close-notes-btn"),
            b = j.querySelector("#save-notes-btn"),
            c = j.querySelector("#edit-notes-btn"),
            d = j.querySelector("#notes-title"),
            e = j.querySelector(".notes__edit"),
            f = e.querySelector("textarea"),
            g = j.querySelector(".notes__view"),
            h = g.querySelector("p"),
            i = j.querySelector("#words");
          i.textContent = `${h.textContent.length}`;
          a.addEventListener("click", () => {
            b.classList.add("hide"), c.classList.remove(
              "hide"
            ), (d.textContent = ""), (f.value = ""), (h.textContent =
              ""), (i.textContent = "0"), (document.body.style.overflow =
              ""), j.classList.remove("show");
          }), c.addEventListener("click", () => {
            b.classList.remove("hide"), c.classList.add(
              "hide"
            ), e.classList.remove("hide"), g.classList.add("hide");
            const a = __global_state.currentTopic.note;
            f.value = a;
          }), b.addEventListener("click", async () => {
            const a = f.value.trim(),
              d = j.id,
              i = a
                .replace(/</g, "&lt;")
                .replace(/\t/g, "&nbsp;&nbsp;")
                .replace(/\n/g, "<br/>")
                .replace(/\s/g, "&nbsp;");
            try {
              const f = await fetch(`${baseUrl}/api/topic/note`, {
                  method: "PUT",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({ text: a, id: d }),
                  credentials: "include"
                }),
                j = await f.json();
              j.status &&
                (
                  b.classList.add("hide"),
                  c.classList.remove("hide"),
                  (h.innerHTML = i),
                  e.classList.add("hide"),
                  g.classList.remove("hide"),
                  __global_state.currentTopic &&
                    (
                      (__global_state.currentTopic.note = a),
                      (__global_state.currentTopic = null),
                      k(a)
                    )
                );
            } catch (a) {
              console.error(a);
            }
          }), f.addEventListener("input", () => {
            const a = f.value.length;
            4e3 <= a
              ? (
                  i.parentElement.classList.add("limit"),
                  (i.textContent = `Word limit has been reached 4000`)
                )
              : (
                  i.parentElement.classList.remove("limit"),
                  (i.textContent = a + "")
                );
          });
        }
        const k = a => {
            const { currentCell: b } = __global_state;
            b &&
              (
                (b.querySelector("img").src = a
                  ? "https://takeuforward.org/wp-content/uploads/2023/05/add-note.png"
                  : "https://takeuforward.org/wp-content/uploads/2023/05/empty-note.png"),
                (b.title = a ? "View/Edit Note" : "Add Note"),
                (__global_state.currentCell = null)
              );
          },
          l = [
            { title: "Action", name: "progress", info: "" },
            {
              title: "Problem [Articles, Codes]",
              name: "title",
              link: "post_link",
              info: ""
            },
            {
              title: "PL-1",
              link: "p1_link",
              icon:
                "https://takeuforward.org/wp-content/uploads/2023/04/Group-11-5.png",
              info: "CS link"
            },
            {
              title: "Solution",
              icon:
                "https://takeuforward.org/wp-content/uploads/2022/08/youtube-icon-42001-300x300.png.webp",
              action: {
                function: (a, b, c) => {
                  600 >= window.innerWidth && window.open(c, "_blank");
                  let d,
                    e = c;
                  const f = i.querySelector("h2");
                  f.textContent = b;
                  const g = new URL(c);
                  (d = c.includes("watch")
                    ? g.searchParams.get("v")
                    : g.pathname
                        .split("/")
                        .at(-1)), (e = `https://www.youtube.com/embed/${d}`);
                  const h = i.querySelector("iframe");
                  (h.title = b), (h.src = e), (document.body.style.overflow =
                    "hidden"), i.classList.add("show");
                },
                param: "yt_link"
              },
              info: "YouTube Solution"
            },
            {
              title: "PL-2",
              link: "p2_link",
              icon:
                "https://takeuforward.org/wp-content/uploads/2022/08/leetcode-1-150x150.png.webp",
              info: "Leetcode link"
            },
            {
              title: "Notes",
              icon: a =>
                a
                  ? "https://takeuforward.org/wp-content/uploads/2023/05/add-note.png"
                  : "https://takeuforward.org/wp-content/uploads/2023/05/empty-note.png",
              param: "note",
              action: {
                function: (a, b, c) => {
                  c = null !== c && void 0 !== c ? c : "";
                  const d = j.querySelector("#save-notes-btn"),
                    e = j.querySelector("#edit-notes-btn");
                  j.id = a;
                  const f = j.querySelector("h2");
                  f.textContent = b;
                  const g = j.querySelector("div#viewer p"),
                    h = c
                      .replace(/</g, "&lt;")
                      .replace(/\t/g, "&nbsp;&nbsp;")
                      .replace(/\n/g, "<br/>")
                      .replace(/\s/g, "&nbsp;");
                  (g.innerHTML = h), (document.body.style.overflow =
                    "hidden"), j.classList.add("show");
                  const i = j.querySelector(".notes__edit"),
                    k = j.querySelector(".notes__view");
                  if (c) {
                    const a = j.querySelector("#words");
                    (a.textContent = `${c.length}`), k.classList.remove(
                      "hide"
                    ), i.classList.add("hide"), e.classList.remove(
                      "hide"
                    ), d.classList.add("hide");
                  } else
                    k.classList.add("hide"), i.classList.remove(
                      "hide"
                    ), e.classList.add("hide"), d.classList.remove("hide");
                },
                param: "note",
                auth: !0
              },
              info: a => (a ? "View/Edit Note" : "Add Note")
            },
            {
              title: "Company",
              icon: "http://takeuforward.org/wp-content/uploads/2023/10/tag.png",
              action: {
                function: (a, b, c) => {
                  const d = h.querySelector(".tags__pills");
                  d
                    .querySelectorAll(".tags__pills--item")
                    .forEach(a => a.remove()), c.forEach(a => {
                    const b = document.createElement("div");
                    (b.className =
                      "tags__pills--item"), (b.textContent = a), d.appendChild(
                      b
                    );
                  }), (document.body.style.overflow =
                    "hidden"), h.classList.add("show");
                },
                param: "tags"
              },
              info: "Company Tags"
            }
          ],
          m = [
            { value: 0, text: "Pending" },
            { value: 1, text: "Done" },
            { value: 2, text: "Revisit" }
          ];
        for (let d = 0; d < f.length; d++) {
          const e = f[d],
            h = document.createElement("details");
          h.className = "top-level";
          {
            const c = document.createElement("summary");
            c.addEventListener("click", () => c.classList.toggle("active"));
            {
              const a = document.createElement("b");
              a.textContent = `Step ${e.sl_no}`;
              const b = document.createTextNode(`: ${e.title}`);
              c.appendChild(a), c.appendChild(b);
            }
            h.appendChild(c);
            const { sub_steps: d } = e;
            for (let c = 0; c < d.length; c++) {
              const f = d[c],
                i = document.createElement("details");
              i.setAttribute("closed", "");
              {
                const c = document.createElement("summary");
                c.addEventListener("click", () => c.classList.toggle("active"));
                {
                  const a = document.createElement("b");
                  a.textContent = `Step ${e.sl_no}.${f.sl_no}`;
                  const b = document.createTextNode(`: ${f.title}`);
                  c.appendChild(a), c.appendChild(b);
                }
                const d = document.createElement("table");
                {
                  const c = document.createElement("thead");
                  {
                    const a = document.createElement("tr");
                    for (const b of l) {
                      const c = document.createElement("th");
                      (c.textContent = b.title), a.appendChild(c);
                    }
                    c.appendChild(a);
                  }
                  const e = document.createElement("tbody");
                  {
                    const { topics: c } = f;
                    for (const d of c) {
                      if (!d.title) continue;
                      const { id: c } = d,
                        f = document.createElement("tr");
                      for (let e = 0; e < l.length; e++) {
                        const h = l[e],
                          {
                            link: i,
                            name: j,
                            icon: k,
                            action: n,
                            param: o,
                            info: p
                          } = h,
                          q = document.createElement("td");
                        if (
                          (
                            (q.title = "string" == typeof p ? p : p(d[o])),
                            0 == e
                          )
                        ) {
                          const e = document.createElement("select");
                          e.id = c;
                          for (const a of m) {
                            const { value: b, text: c } = a,
                              d = document.createElement("option");
                            (d.value =
                              b + ""), (d.textContent = c), e.appendChild(d);
                          }
                          e.value = `${null !== (a = d.status) && void 0 !== a
                            ? a
                            : 0}`;
                          let f = "";
                          switch (d.status) {
                            case 1: {
                              f = "complete";
                              break;
                            }
                            case 2: {
                              f = "revision";
                              break;
                            }
                          }
                          (e.className = f), e.setAttribute(
                            "prev-value",
                            `${null !== (b = d.status) && void 0 !== b ? b : 0}`
                          ), q.appendChild(e);
                        } else if (j) {
                          let a = d[j];
                          let b = 35 < a.length;
                          if (
                            (
                              b &&
                                (
                                  (q.title = a),
                                  (a = a.substring(0, 35) + "\u2026")
                                ),
                              i && d[i]
                            )
                          ) {
                            const b = document.createElement("a");
                            (b.target = "_blank"), (b.rel =
                              "noopener"), (b.href =
                              d[i]), (b.textContent = a), q.appendChild(b);
                          } else q.textContent = a;
                        } else if (k && i && d[i]) {
                          const a = document.createElement("a");
                          if (
                            (
                              (a.target = "_blank"),
                              (a.rel = "noopener"),
                              (a.href = d[i]),
                              "string" == typeof k
                            )
                          ) {
                            const b = document.createElement("img");
                            (b.className =
                              "aligncenter wp-image-1830 lazy-loaded"), (b.src = k), (b.alt =
                              ""), (b.width = 24), (b.height = 24), (b.decoding =
                              "async"), (b.loading = "lazy"), b.setAttribute(
                              "data-lazy-type",
                              "image"
                            ), b.setAttribute("data-src", k), a.appendChild(b);
                          }
                          q.appendChild(a);
                        } else if (
                          k &&
                          n &&
                          (d[n.param] || "note" === n.param) &&
                          "tags" !== n.param
                        ) {
                          const a = document.createElement("button");
                          {
                            const b = document.createElement("img"),
                              c = "string" == typeof k ? k : k(d[o]);
                            (b.src = c), (b.alt =
                              ""), (b.width = 24), (b.height = 24), (b.decoding =
                              "async"), (b.loading = "lazy"), b.setAttribute(
                              "data-lazy-type",
                              "image"
                            ), b.setAttribute("data-src", c), a.appendChild(b);
                          }
                          a.addEventListener("click", function(a) {
                            a.preventDefault(), a.stopPropagation(), n.auth && !g ? document.getElementById("login-signup").click() : (n.function(c, d.title, d[n.param]), (__global_state.currentTopic = d), (__global_state.currentCell = q));
                          }), q.appendChild(a);
                        }
                        f.appendChild(q);
                      }
                      e.appendChild(f);
                    }
                  }
                  d.appendChild(c), d.appendChild(e);
                }
                i.appendChild(c), i.appendChild(d);
              }
              h.appendChild(i);
            }
          }
          c.appendChild(h);
        }
        document
          .querySelectorAll(
            "div.entry-content > #dsa_sheets_problems_table_row_details"
          )
          .forEach(a => {
            a.classList.add("not-del");
          });
        {
          const a = document.querySelector(".topics-container");
          if (a) {
            const b = document.createElement("div");
            b.className = "outer-box-tracker global";
            {
              {
                const a = document.createElement("span");
                a.className = "text";
                {
                  const b = document.createTextNode("("),
                    c = document.createElement("span");
                  (c.className = "solved"), (c.textContent = "00");
                  const d = document.createTextNode("/"),
                    e = document.createElement("span");
                  (e.className = "total"), (e.textContent = "00");
                  const f = document.createTextNode(")");
                  a.appendChild(b), a.appendChild(c), a.appendChild(
                    d
                  ), a.appendChild(e), a.appendChild(f);
                }
                const c = document.createElement("div");
                c.className = "box-of-tracker";
                {
                  const a = document.createElement("div");
                  (a.className = "inner-filling"), (a.style.width =
                    "0%"), (a.style.backgroundColor =
                    "green"), (a.style.height = "100%"), (a.style.transition =
                    "width 250ms ease-out"), c.appendChild(a);
                }
                const d = document.createElement("p");
                {
                  const a = document.createTextNode("Marked for Revision: "),
                    b = document.createElement("b");
                  (b.className = "revision"), d.appendChild(a), d.appendChild(
                    b
                  );
                }
                b.appendChild(a), b.appendChild(c), b.appendChild(d);
              }
              const c = a.querySelector("details");
              c && c.before(b);
            }
            const c = b.querySelector(".inner-filling");
            let d = 0,
              e = 0,
              f = 0;
            const h = () => {
                (c.style.width = `${100 * (d / e)}%`), (b.querySelector(
                  ".solved"
                ).textContent = `${9 < d ? d : `0${d}`}`), (b.querySelector(
                  ".revision"
                ).textContent = `${f}`);
              },
              j = a.children;
            for (let a = 0; a < j.length; a++) {
              const b = j.item(a);
              if ("DETAILS" === b.tagName) {
                const a = b,
                  c = document.createElement("div");
                c.className = "outer-box-tracker";
                {
                  const a = document.createElement("span");
                  a.className = "text";
                  {
                    const b = document.createTextNode("("),
                      c = document.createElement("span");
                    (c.className = "solved"), (c.textContent = "00");
                    const d = document.createTextNode("/"),
                      e = document.createElement("span");
                    (e.className = "total"), (e.textContent = "00");
                    const f = document.createTextNode(")");
                    a.appendChild(b), a.appendChild(c), a.appendChild(
                      d
                    ), a.appendChild(e), a.appendChild(f);
                  }
                  const b = document.createElement("div");
                  b.className = "box-of-tracker";
                  {
                    const a = document.createElement("div");
                    (a.className = "inner-filling"), (a.style.width =
                      "0%"), (a.style.backgroundColor =
                      "green"), (a.style.height = "100%"), (a.style.transition =
                      "width 250ms ease-out"), b.appendChild(a);
                  }
                  c.appendChild(a), c.appendChild(b);
                }
                const i = c.querySelector(".inner-filling");
                let k = 0,
                  l = 0;
                const m = () => {
                    (i.style.width = `${100 * (k / l)}%`), (c.querySelector(
                      ".solved"
                    ).textContent = `${k}`), h();
                  },
                  n = a.querySelectorAll("details");
                for (let a = 0; a < n.length; a++) {
                  const b = n.item(a),
                    c = document.createElement("div");
                  c.className = "outer-box-tracker";
                  {
                    const a = document.createElement("span");
                    a.className = "text";
                    {
                      const b = document.createTextNode("("),
                        c = document.createElement("span");
                      (c.className = "solved"), (c.textContent = "00");
                      const d = document.createTextNode("/"),
                        e = document.createElement("span");
                      (e.className = "total"), (e.textContent = "00");
                      const f = document.createTextNode(")");
                      a.appendChild(b), a.appendChild(c), a.appendChild(
                        d
                      ), a.appendChild(e), a.appendChild(f);
                    }
                    const b = document.createElement("div");
                    b.className = "box-of-tracker";
                    {
                      const a = document.createElement("div");
                      (a.className = "inner-filling"), (a.style.width =
                        "0%"), (a.style.backgroundColor =
                        "green"), (a.style.height =
                        "100%"), (a.style.transition =
                        "width 250ms ease-out"), b.appendChild(a);
                    }
                    c.appendChild(a), c.appendChild(b);
                  }
                  const e = c.querySelector(".inner-filling");
                  let h = 0,
                    i = 0;
                  const j = () => {
                      (e.style.width = `${100 * (h / i)}%`), (c.querySelector(
                        ".solved"
                      ).textContent = `${h}`), m();
                    },
                    o = b.querySelector("table");
                  if (o) {
                    const a = o.querySelectorAll("tbody tr");
                    for (const b of a) {
                      const a = b.querySelector("select");
                      a &&
                        (
                          i++,
                          "1" === a.value
                            ? (h++, b.classList.add("complete"))
                            : "2" === a.value &&
                              (f++, b.classList.add("revision")),
                          a.addEventListener("change", async c => {
                            c.preventDefault(), c.stopPropagation();
                            const e = +a.getAttribute("prev-value");
                            if (!g) return (a.value = `${e}`), openAuthModal();
                            const i = +a.value;
                            switch (e) {
                              case 0: {
                                switch (i) {
                                  case 1: {
                                    b.classList.add(
                                      "complete"
                                    ), a.classList.add(
                                      "complete"
                                    ), h++, k++, d++;
                                    break;
                                  }
                                  case 2: {
                                    b.classList.add(
                                      "revision"
                                    ), a.classList.add("revision"), f++;
                                    break;
                                  }
                                }
                                break;
                              }
                              case 1: {
                                switch ((
                                  b.classList.remove("complete"),
                                  a.classList.remove("complete"),
                                  h--,
                                  k--,
                                  d--,
                                  i
                                )) {
                                  case 0:
                                    break;
                                  case 2: {
                                    b.classList.add(
                                      "revision"
                                    ), a.classList.add("revision"), f++;
                                    break;
                                  }
                                }
                                break;
                              }
                              case 2:
                                switch ((
                                  b.classList.remove("revision"),
                                  a.classList.remove("revision"),
                                  f--,
                                  i
                                )) {
                                  case 0:
                                    break;
                                  case 1: {
                                    b.classList.add(
                                      "complete"
                                    ), a.classList.add(
                                      "complete"
                                    ), h++, k++, d++;
                                    break;
                                  }
                                }
                            }
                            a.setAttribute("prev-value", `${i}`), j();
                            try {
                              const b = JSON.stringify({
                                  progress: +a.value,
                                  id: a.id
                                }),
                                c = await fetch(
                                  `${baseUrl}/api/topic/progress`,
                                  {
                                    method: "PUT",
                                    headers: {
                                      "Content-Type": "application/json",
                                      "Content-Length": b.length + ""
                                    },
                                    body: b,
                                    credentials: "include"
                                  }
                                ),
                                d = await c.json();
                            } catch (a) {
                              console.error(a);
                            }
                          })
                        );
                    }
                  }
                  (k += h), (l += i), (c.querySelector(
                    ".total"
                  ).textContent = `${i}`), (c.querySelector(
                    ".solved"
                  ).textContent = `${9 < h ? h : `0${h}`}`), j();
                  const p = b.querySelector("summary");
                  p && p.appendChild(c);
                }
                (e += l), (d += k), (c.querySelector(
                  ".total"
                ).textContent = `${l}`), (c.querySelector(
                  ".solved"
                ).textContent = `${9 < k ? k : `0${k}`}`), m();
                const o = a.querySelector("summary");
                o && o.appendChild(c);
              }
            }
            (b.querySelector(".total").textContent = `${e}`), (b.querySelector(
              ".solved"
            ).textContent = `${9 < d ? d : `0${d}`}`), h();
          }
        }
      } else throw new Error("Topics container element not found.");
    }
  } catch (a) {
    console.error(a);
  }
});
