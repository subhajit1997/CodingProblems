---------------------------------
Introduction to Doubly Linked List
---------------------------------

1) What is DLL?

    Doubly Linked Lists,  as the name suggests, take the concept of 2-way traversal by introducing two pointers in each node.
    This enables seamless traversal in both directions, making them a valuable tool for various advanced data structure applications.

2) Representation in Java

    public class Node {
        public int data;       // Data stored in the node
        public Node next;      // Reference to the next node in the list (forward direction)
        public Node back;      // Reference to the previous node in the list (backward direction)

        // Constructor for a Node with both data, a reference to the next node, and a reference to the previous node
        public Node(int data, Node next, Node back) {
            this.data = data;
            this.next = next;
            this.back = back;
        }

        // Constructor for a Node with data, and no references to the next and previous nodes (end of the list)
        public Node(int data) {
            this.data = data;
            this.next = null;
            this.back = null;
        }
    }

3)Array -> DLL
    private static convertArr2DLL(int[] arr){
        Node head = new Node(arr[0])
        Node prev = head;
        for(i=1 ->n-1){
            Node temp = new Node(arr[i],null,prev)
            prev.next = temp;
            prev = temp;
        }
        return head;
    }

4) Deletion of a Node

    Delete at head->
    private static Node deleteNodeHead(Node head){
        if(head==null || head.next == null){
            return null;
        }
        Node prev = head;
        head = head.next;

        head.back= null;
        prev.next = null;
        return head;
    }

    Delete tail of DLL->
        private static Node deleteNodeTail(Node head){
            if(head==null || head.next == null){
                return null;
            }
            Node tail = head;
            while(tail.next!=null){
                 tail = tail.next;
            }
           Node newTail = tail.back;
            newTail.next = null;
            tail.back= null;
            return head;
        }
    Delete k element of DLL->
        private static Node deleteNodeKElemet(Node head,int k){
            if(head==null ){
                return null;
            }
            in cnt=0;
            Node kNode = head;
            while(kNode!=null){
                cnt++;
                if(cnt==k) breaak;
                 kNode = kNode.next;
            }
           Node prev = kNode.back;
           Node nextNode =   kNode.next;

           if(prev==NULL && nextNode==NULL){
            return null;
           }else if(prev==NULL)
                return deleteNodeHead(head);
            else if(nextNode == NULL)
                return deleteNodeTail(head)

            prev.next = nextNode;
            nextNod.back= prev;

            kNode.next = null
            kNode.back=null
            return head;
        }

    Delete node element of DLL(node !=head)->
        private static Node deleteNode(Node temp){
            Node prev = temp.back;
            Node nextNode = temp.next;

            if(nextNode == NULL){
                prev.next = null;
                temp.back= null;
                return
            }
            prev.next= nextNode;
            nextNde.back= prev;

            temp.next= temp.back= nulll;;


        }

5)Insertion of a Node
    Insertion before head->
        public static Node insertBeforeHead(Node head,int val){
            Node newHead = new Node(val,head,null);
            head.back = newHead;
            return newNode;
        }

    Insertion before the tail->
        public static Node insertBeforeTail(Node head,int val){
            if(head.next == null)
                return insertBeforeHead(head,val);
            Node tail  = head;
            while(tail.next!=NULL){
                tail = tail.next;
            }
            Node prev = tail.back;
            Node newNode = new Node(val,tail,prev);
            prev.next = newNode;
            tail.next = newNode;
            return head;
        }
    Insertion before kth Element->


    Insertion Node


