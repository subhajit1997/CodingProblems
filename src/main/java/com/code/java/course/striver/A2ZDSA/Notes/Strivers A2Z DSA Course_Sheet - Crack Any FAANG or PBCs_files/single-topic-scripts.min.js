
async function loadTopic(topicName){
    // console.log(topicName)
    // const url = new URLSearchParams(window.location.search).get("testing")
    // console.log(url);

    // if (!url)
    //     return;
    try {
        
        
        const tagsModal = document.getElementById("tags-modal");
        if (tagsModal) {
            const closeBtn = tagsModal.querySelector("button.tags__close");
            closeBtn.addEventListener("click", () => {
                document.body.style.overflow = "";
                tagsModal.classList.remove("show");
            });
        }
        const openCompanyTags = (id, title, tags_str) => {
            let tags = tags_str.split(",").map((x) => x.trim());
            const pillsContainer = tagsModal.querySelector(".tags__pills");
            pillsContainer
                .querySelectorAll(".tags__pills--item")
                .forEach((x) => x.remove());
            tags.forEach((tag) => {
                const pillEl = document.createElement("div");
                pillEl.className = "tags__pills--item";
                pillEl.textContent = tag;
                pillsContainer.appendChild(pillEl);
            });
            document.body.style.overflow = "hidden";
            tagsModal.classList.add("show");
        };
        const ytModal = document.getElementById("yt-modal");
        if (ytModal) {
            const closeBtn = ytModal.querySelector("button.yt-sol__close");
            closeBtn.addEventListener("click", () => {
                document.body.style.overflow = "auto";
                ytModal.classList.remove("show");
                const iFrameEl = ytModal.querySelector("iframe");
                iFrameEl.src = "";
            });
        }
        const openYtModal = (id, title, link) => {

            if (window.innerWidth <= 600) {
                window.open(link, "_blank");
            }
            let embedLink = link;
            let vid_id;
            const titleEl = ytModal.querySelector("h2");
            titleEl.textContent = title;
            const url = new URL(link);
            if (link.includes("watch")) {
                vid_id = url.searchParams.get("v");
            }
            else
                vid_id = url.pathname.split("/").at(-1);
            embedLink = `https://www.youtube.com/embed/${vid_id}`;
            const iFrameEl = ytModal.querySelector("iframe");
            iFrameEl.title = title;
            iFrameEl.src = embedLink;
            document.body.style.overflow = "hidden";
            ytModal.classList.add("show");
        };

        const notesModal = document.getElementById("notes-modal");
        if (notesModal) {
            const closeBtn = notesModal.querySelector("button#close-notes-btn");
            const saveBtn = notesModal.querySelector("#save-notes-btn");
            const editBtn = notesModal.querySelector("#edit-notes-btn");
            const titleEl = notesModal.querySelector("#notes-title");
            const editView = notesModal.querySelector(".notes__edit");
            const inputEl = editView.querySelector("textarea");

            const viewerView = notesModal.querySelector(".notes__view");

            const paraEl = viewerView.querySelector("p");
            const wordcEl = notesModal.querySelector("#words");

            wordcEl.textContent = `${paraEl.textContent.length}`;

            const closeModal = () => {
                saveBtn.classList.add("hide");
                editBtn.classList.remove("hide");
                titleEl.textContent = "";
                inputEl.value = "";
                paraEl.textContent = "";
                wordcEl.textContent = "0";
                document.body.style.overflow = "";
                notesModal.classList.remove("show");
            };
            const onEdit = () => {
                saveBtn.classList.remove("hide");
                editBtn.classList.add("hide");
                editView.classList.remove("hide");
                viewerView.classList.add("hide");
                const text = __global_state.currentTopic.note;
                inputEl.value = text;
            };
            const onSave = async () => {
                const text = inputEl.value.trim();
                const id = notesModal.id;
                const formattedText = text
                    .replace(/</g, "&lt;")
                    .replace(/\t/g, "&nbsp;&nbsp;")
                    .replace(/\n/g, "<br/>")
                    .replace(/\s/g, "&nbsp;");
                try {
                    const saveReq = await fetch(`${baseUrl}/api/topic/note`, {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            text,
                            id,
                        }),
                        credentials: "include",
                    });
                    const saveResp = await saveReq.json();
                    if (saveResp.status) {
                        saveBtn.classList.add("hide");
                        editBtn.classList.remove("hide");
                        paraEl.innerHTML = formattedText;
                        editView.classList.add("hide");
                        viewerView.classList.remove("hide");
                        if (__global_state.currentTopic) {
                            __global_state.currentTopic.note = text;
                            __global_state.currentTopic = null;
                            updateNotesCell(text);
                        }
                    }
                }
                catch (error) {
                    console.error(error);
                }
            };
            closeBtn.addEventListener("click", closeModal);
            editBtn.addEventListener("click", onEdit);
            saveBtn.addEventListener("click", onSave);
            inputEl.addEventListener("input", () => {
                const len = inputEl.value.length;
                if (len >= 4000) {
                    wordcEl.parentElement.classList.add("limit");
                    wordcEl.textContent = `Word limit has been reached 4000`;
                }
                else {
                    wordcEl.parentElement.classList.remove("limit");
                    wordcEl.textContent = len + "";
                }
            });
        }
        const openNotesModal = (id, title, text) => {

            text = text !== null && text !== void 0 ? text : "";
            console.log(text)
            // return
            const saveBtn = notesModal.querySelector("#save-notes-btn");
            const editBtn = notesModal.querySelector("#edit-notes-btn");
            notesModal.id = id;
            const titleEl = notesModal.querySelector("h2");
            titleEl.textContent = title;
            const pEl = notesModal.querySelector("div#viewer p");
            console.log("P ELement",pEl)
            // return
            const formattedText = text
                .replace(/</g, "&lt;")
                .replace(/\t/g, "&nbsp;&nbsp;")
                .replace(/\n/g, "<br/>")
                .replace(/\s/g, "&nbsp;");
            pEl.innerHTML = formattedText;
            document.body.style.overflow = "hidden";
            notesModal.classList.add("show");
            const editView = notesModal.querySelector(".notes__edit");
            const viewerView = notesModal.querySelector(".notes__view");
            if (!text) {
                viewerView.classList.add("hide");
                editView.classList.remove("hide");
                editBtn.classList.add("hide");
                saveBtn.classList.remove("hide");
            }
            else {
                const wordcEl = notesModal.querySelector("#words");
                wordcEl.textContent = `${text.length}`;
                viewerView.classList.remove("hide");
                editView.classList.add("hide");
                editBtn.classList.remove("hide");
                saveBtn.classList.add("hide");
            }
        };
        const updateNotesCell = (param) => {
            const { currentCell } = __global_state;
            if (currentCell) {
                currentCell.querySelector("img").src =
                    param
                        ? "https://takeuforward.org/wp-content/uploads/2023/05/add-note.png"
                        : "https://takeuforward.org/wp-content/uploads/2023/05/empty-note.png";
                currentCell.title = param
                    ? "View/Edit Note"
                    : "Add Note";
                __global_state.currentCell = null;
            }
        };
        function dropDownFunction(day, topicsContainer, columns, statuses, isLoggedIn) {
            var _a, _b;
            const detailsEl = document.createElement("details");
            detailsEl.className = "top-level";
            {
                const summaryEl = document.createElement("summary");
                summaryEl.addEventListener("click", () => summaryEl.classList.toggle("active"));
                {
                    const boldEl = document.createElement("b");
                    boldEl.textContent = `Part ${day.sl_no}`;
                    const textEl = document.createTextNode(`: ${day.title}`);
                    summaryEl.appendChild(boldEl);
                    summaryEl.appendChild(textEl);
                }
                detailsEl.appendChild(summaryEl);

                const pEl = document.createElement("p");
                pEl.textContent = day.description;
                // console.log(day.description)

                detailsEl.appendChild(pEl);
                const tableEl = document.createElement("table");
                {
                    const theadEl = document.createElement("thead");
                    {
                        const trEl = document.createElement("tr");
                        {
                            for (const column of columns) {
                                const thEl = document.createElement("th");
                                thEl.textContent = column.title;
                                trEl.appendChild(thEl);
                            }
                        }
                        theadEl.appendChild(trEl);
                    }
                    const tbodyEl = document.createElement("tbody");
                    {
                        const { topics } = day;
                        for (const topic of topics) {
                            const { id, title } = topic;
                            if (!title)
                                continue;
                            const trEl = document.createElement("tr");
                            {
                                for (let k = 0; k < columns.length; k++) {
                                    const column = columns[k];
                                    const { link, name, icon, text, action, info, param } = column;
                                    const tdEl = document.createElement("td");
                                    tdEl.title =
                                        typeof info === "string" ? info : info(topic[param]);
                                    if (k === 0) {
                                        const selectEl = document.createElement("select");
                                        selectEl.id = id;
                                        for (const status of statuses) {
                                            const { value, text } = status;
                                            const optionEl = document.createElement("option");
                                            optionEl.value = value + "";
                                            optionEl.textContent = text;
                                            selectEl.appendChild(optionEl);
                                        }
                                        selectEl.value = `${(_a = topic.status) !== null && _a !== void 0 ? _a : 0}`;
                                        let className = "";
                                        switch (topic.status) {
                                            case 1: {
                                                className = "complete";
                                                break;
                                            }
                                            case 2: {
                                                className = "revision";
                                                break;
                                            }
                                        }
                                        selectEl.className = className;
                                        selectEl.setAttribute("prev-value", `${(_b = topic.status) !== null && _b !== void 0 ? _b : 0}`);
                                        tdEl.appendChild(selectEl);
                                        // tdEl.appendChild(checkboxEl);
                                    }
                                    else if (name) {
                                        let text = topic[name];
                                        const limit = 42;
                                        let isLong = text.length > limit;
                                        if (isLong) {
                                            tdEl.title = text;
                                            text = text.substring(0, limit) + "…";
                                        }
                                        if (link && topic[link]) {
                                            const linkEl = document.createElement("a");
                                            linkEl.target = "_blank";
                                            linkEl.rel = "noopener";
                                            linkEl.href = topic[link];
                                            linkEl.textContent = text;
                                            tdEl.appendChild(linkEl);
                                        }
                                        else {
                                            tdEl.textContent = text;
                                        }
                                    }
                                    else if (text) {
                                        if (link && topic[link]) {
                                            const linkEl = document.createElement("a");
                                            linkEl.target = "_blank";
                                            linkEl.rel = "noopener";
                                            linkEl.href = topic[link];
                                            linkEl.textContent = text;
                                            tdEl.appendChild(linkEl);
                                        }
                                        else {
                                            tdEl.textContent = text;
                                        }
                                    }
                                    else if (icon && link && topic[link]) {
                                        const linkEl = document.createElement("a");
                                        linkEl.target = "_blank";
                                        linkEl.rel = "noopener";
                                        linkEl.href = topic[link];
                                        if (typeof icon === "string") {
                                            const imgEl = document.createElement("img");
                                            imgEl.className =
                                                "aligncenter wp-image-1830 lazy-loaded";
                                            imgEl.src = icon;
                                            imgEl.alt = "";
                                            imgEl.width = 24;
                                            imgEl.height = 24;
                                            imgEl.decoding = "async";
                                            imgEl.loading = "lazy";
                                            imgEl.setAttribute("data-lazy-type", "image");
                                            imgEl.setAttribute("data-src", icon);
                                            linkEl.appendChild(imgEl);
                                        }
                                        tdEl.appendChild(linkEl);
                                    }
                                    else if (icon &&
                                        action &&
                                        (action.param === "note" || topic[action.param])) {
                                        // if (action.param !== "tags") {
                                        const buttonEl = document.createElement("button");
                                        {
                                            const imgEl = document.createElement("img");
                                            const src = typeof icon === "string"
                                                ? icon
                                                : icon(topic[param]);
                                            imgEl.src = src;
                                            imgEl.alt = "";
                                            imgEl.width = 24;
                                            imgEl.height = 24;
                                            imgEl.decoding = "async";
                                            imgEl.loading = "lazy";
                                            imgEl.setAttribute("data-lazy-type", "image");
                                            imgEl.setAttribute("data-src", src);
                                            buttonEl.appendChild(imgEl);
                                        }
                                        buttonEl.addEventListener("click", function (ev) {
                                            ev.preventDefault();
                                            ev.stopPropagation();
                                            if (action.auth && !isLoggedIn) {
                                                document.getElementById("login-signup").click();
                                            }
                                            else {
                                                action.function(id, title, topic[action.param]);
                                                __global_state.currentTopic = topic;
                                                __global_state.currentCell = tdEl;
                                            }
                                        });
                                        tdEl.appendChild(buttonEl);
                                        // }
                                    }
                                    trEl.appendChild(tdEl);
                                }
                            }
                            tbodyEl.appendChild(trEl);
                        }
                    }
                    tableEl.appendChild(theadEl);
                    tableEl.appendChild(tbodyEl);
                }
                detailsEl.appendChild(tableEl);
            }
            topicsContainer.appendChild(detailsEl);
        }
        function progressBar(isLoggedIn) {
            const topicsContainerEl = document.querySelector(".topics-container");
            if (topicsContainerEl) {
                const globalTrackerEl = document.createElement("div");
                globalTrackerEl.className = "outer-box-tracker global";
                {
                    {
                        const globalTrackerText = document.createElement("span");
                        globalTrackerText.className = "text";
                        {
                            const openBracket = document.createTextNode("(");
                            const solvedTextEl = document.createElement("span");
                            solvedTextEl.className = "solved";
                            solvedTextEl.textContent = "00";
                            const slash = document.createTextNode("/");
                            const totalTextEl = document.createElement("span");
                            totalTextEl.className = "total";
                            totalTextEl.textContent = "00";
                            const closeBracket = document.createTextNode(")");
                            globalTrackerText.appendChild(openBracket);
                            globalTrackerText.appendChild(solvedTextEl);
                            globalTrackerText.appendChild(slash);
                            globalTrackerText.appendChild(totalTextEl);
                            globalTrackerText.appendChild(closeBracket);
                        }
                        const outerBar = document.createElement("div");
                        outerBar.className = "box-of-tracker";
                        {
                            const innerBar = document.createElement("div");
                            innerBar.className = "inner-filling";
                            innerBar.style.width = "0%";
                            innerBar.style.backgroundColor = "green";
                            innerBar.style.height = "100%";
                            innerBar.style.transition = "width 250ms ease-out";
                            outerBar.appendChild(innerBar);
                        }
                        const revisionText = document.createElement("p");
                        {
                            const tn = document.createTextNode("Marked for Revision: ");
                            const revisionNum = document.createElement("b");
                            revisionNum.className = "revision";
                            revisionText.appendChild(tn);
                            revisionText.appendChild(revisionNum);
                        }
                        globalTrackerEl.appendChild(globalTrackerText);
                        globalTrackerEl.appendChild(outerBar);
                        globalTrackerEl.appendChild(revisionText);
                    }
                    const firstDetailsEl = topicsContainerEl.querySelector("details");
                    if (firstDetailsEl) {
                        firstDetailsEl.before(globalTrackerEl);
                    }
                }
                const innerBar = globalTrackerEl.querySelector(".inner-filling");
                let globalSolvedNum = 0;
                let globalTotalNum = 0;
                let markedForRevision = 0;
                const updateGlobalTracker = () => {
                    innerBar.style.width = `${100 * (globalSolvedNum / globalTotalNum)}%`;
                    globalTrackerEl.querySelector(".solved").textContent = `${9 < globalSolvedNum ? globalSolvedNum : `0${globalSolvedNum}`}`;
                    globalTrackerEl.querySelector(".revision").textContent = `${markedForRevision}`;
                };
                const containerChildren = topicsContainerEl.children;
                for (let i = 0; i < containerChildren.length; i++) {
                    const containerChild = containerChildren.item(i);
                    if ("DETAILS" === containerChild.tagName) {
                        const dayContainer = containerChild;
                        const trackerEl = document.createElement("div");
                        trackerEl.className = "outer-box-tracker";
                        {
                            const trackerText = document.createElement("span");
                            trackerText.className = "text";
                            {
                                const openBracket = document.createTextNode("(");
                                const solvedTextEl = document.createElement("span");
                                solvedTextEl.className = "solved";
                                solvedTextEl.textContent = "00";
                                const slash = document.createTextNode("/");
                                const totalTextEl = document.createElement("span");
                                totalTextEl.className = "total";
                                totalTextEl.textContent = "00";
                                const closeBracket = document.createTextNode(")");
                                trackerText.appendChild(openBracket);
                                trackerText.appendChild(solvedTextEl);
                                trackerText.appendChild(slash);
                                trackerText.appendChild(totalTextEl);
                                trackerText.appendChild(closeBracket);
                            }
                            const outerBar = document.createElement("div");
                            outerBar.className = "box-of-tracker";
                            {
                                const innerBar = document.createElement("div");
                                innerBar.className = "inner-filling";
                                innerBar.style.width = "0%";
                                innerBar.style.backgroundColor = "green";
                                innerBar.style.height = "100%";
                                innerBar.style.transition = "width 250ms ease-out";
                                outerBar.appendChild(innerBar);
                            }
                            trackerEl.appendChild(trackerText);
                            trackerEl.appendChild(outerBar);
                        }
                        const innerBar = trackerEl.querySelector(".inner-filling");
                        let daySolvedNum = 0;
                        let SingleTopicDayTotalNum = 0;
                        const updateSingleTopicDayTracker = () => {
                            innerBar.style.width = `${100 * (daySolvedNum / SingleTopicDayTotalNum)}%`;
                            trackerEl.querySelector(".solved").textContent = `${daySolvedNum}`;
                            updateGlobalTracker();
                        };
                        const tableEl = dayContainer.querySelector("table");
                        if (tableEl) {
                            const trEls = tableEl.querySelectorAll("tbody tr");
                            for (const trEl of trEls) {
                                const selectEl = trEl.querySelector("select");
                                if (selectEl) {
                                    SingleTopicDayTotalNum++;
                                    if (selectEl.value === "1") {
                                        daySolvedNum++;
                                        trEl.classList.add("complete");
                                    }
                                    else if (selectEl.value === "2") {
                                        markedForRevision++;
                                        trEl.classList.add("revision");
                                    }
                                    selectEl.addEventListener("change", async () => {
                                        if (!isLoggedIn)
                                            return openAuthModal();
                                        const currStatus = +selectEl.value;
                                        const prevStatus = +selectEl.getAttribute("prev-value");
                                        switch (prevStatus) {
                                            case 0: {
                                                switch (currStatus) {
                                                    case 1: {
                                                        trEl.classList.add("complete");
                                                        selectEl.classList.add("complete");
                                                        daySolvedNum++;
                                                        globalSolvedNum++;
                                                        break;
                                                    }
                                                    case 2: {
                                                        trEl.classList.add("revision");
                                                        selectEl.classList.add("revision");
                                                        markedForRevision++;
                                                        break;
                                                    }
                                                }
                                                break;
                                            }
                                            case 1: {
                                                trEl.classList.remove("complete");
                                                selectEl.classList.remove("complete");
                                                daySolvedNum--;
                                                globalSolvedNum--;
                                                switch (currStatus) {
                                                    case 0: {
                                                        break;
                                                    }
                                                    case 2: {
                                                        trEl.classList.add("revision");
                                                        selectEl.classList.add("revision");
                                                        markedForRevision++;
                                                        break;
                                                    }
                                                }
                                                break;
                                            }
                                            case 2: {
                                                trEl.classList.remove("revision");
                                                selectEl.classList.remove("revision");
                                                markedForRevision--;
                                                switch (currStatus) {
                                                    case 0: {
                                                        break;
                                                    }
                                                    case 1: {
                                                        trEl.classList.add("complete");
                                                        selectEl.classList.add("complete");
                                                        daySolvedNum++;
                                                        globalSolvedNum++;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        selectEl.setAttribute("prev-value", `${currStatus}`);
                                        updateSingleTopicDayTracker();
                                        try {
                                            const updateBody = JSON.stringify({
                                                progress: +selectEl.value,
                                                id: selectEl.id,
                                            });
                                            const updateReq = await fetch(`${baseUrl}/api/topic/progress`, {
                                                method: "PUT",
                                                headers: {
                                                    "Content-Type": "application/json",
                                                    "Content-Length": updateBody.length + "",
                                                },
                                                body: updateBody,
                                                credentials: "include",
                                            });
                                            const updateResp = await updateReq.json();
                                        }
                                        catch (error) {
                                            console.error(error);
                                        }
                                    });
                                }
                            }
                        }
                        globalTotalNum += SingleTopicDayTotalNum;
                        globalSolvedNum += daySolvedNum;
                        trackerEl.querySelector(".total").textContent = `${SingleTopicDayTotalNum}`;
                        trackerEl.querySelector(".solved").textContent = `${9 < daySolvedNum ? daySolvedNum : `0${daySolvedNum}`}`;
                        updateSingleTopicDayTracker();
                        const summaryEl = dayContainer.querySelector("summary");
                        if (summaryEl)
                            summaryEl.appendChild(trackerEl);
                    }
                }
                globalTrackerEl.querySelector(".total").textContent = `${globalTotalNum}`;
                globalTrackerEl.querySelector(".solved").textContent = `${9 < globalSolvedNum ? globalSolvedNum : `0${globalSolvedNum}`}`;
                updateGlobalTracker();
            }
        }
        
        const columns = [
            {
                title: "Action",
                name: "progress",
                info: "",
            },
            {
                title: "Problem [Articles, Codes]",
                name: "title",
                link: "post_link",
                info: "",
            },
            {
                title: "PL-1",
                icon: "https://takeuforward.org/wp-content/uploads/2023/04/Group-11-5.png",
                link: "p1_link",
                info: "CodeStudio link",
            },
            {
                title: "Solution",
                icon: "https://takeuforward.org/wp-content/uploads/2022/08/youtube-icon-42001-300x300.png.webp",
                action: {
                    function: openYtModal,
                    param: "yt_link",
                },
                info: "YouTube Solution",
            },
            {
                title: "PL-2",
                icon: "https://takeuforward.org/wp-content/uploads/2022/08/leetcode-1-150x150.png.webp",
                link: "p2_link",
                info: "Leetcode link",
            },
            {
                title: "Notes",
                icon: (param) => param
                    ? "https://takeuforward.org/wp-content/uploads/2023/05/add-note.png"
                    : "https://takeuforward.org/wp-content/uploads/2023/05/empty-note.png",
                param: "note",
                action: {
                    function: openNotesModal,
                    param: "note",
                    auth: true,
                },
                info: (param) => (param ? "View/Edit Note" : "Add Note"),
            },
            {
                title: "Company",
                icon: "http://takeuforward.org/wp-content/uploads/2023/10/tag.png",
                action: {
                    function: openCompanyTags,
                    param: "tags",
                },
                info: "Company Tags",
            },
        ];
        const statuses = [
            {
                value: 0,
                text: "Pending",
            },
            {
                value: 1,
                text: "Done",
            },
            {
                value: 2,
                text: "Revisit",
            },
        ];
        
        // console.log("script loaded")
        // Fetching Single Topic Data. Enter Topic Name
        const request = await fetch(`${baseUrl}/api/singletopic/single?topicName=${topicName}`, {
            credentials: "include",
        });
        const response = await request.json();
        if (request.status === 200 && response.status) {
            const topicsContainer = document.getElementById("render-questions");
            if (topicsContainer) {
                const loaderEl = topicsContainer.querySelector("#new-loader");
                if (loaderEl)
                    loaderEl.remove();
                    
                const divElement = document.getElementById("dummy_table");
    
                if (divElement) {
                    divElement.remove();
                }
                
                const { data: days, credentials: isLoggedIn } = response;
                if (!isLoggedIn)
                    localStorage.removeItem("__is_logged_in");

                for (let i = 0; i < days.length; i++) {
                    const day = days[i];
                    dropDownFunction(day, topicsContainer, columns, statuses, isLoggedIn);
                }
                document
                    .querySelectorAll("#dsa_sheets_problems_table_row_details")
                    .forEach((detailsEl) => detailsEl.classList.add("not-del"));
                // Progress Code
                progressBar(isLoggedIn);
            }
            else {
                throw new Error("Topics container element not found.");
            }
        }
        
        
    }
    catch (error) {
        console.error(error);
    }  
    
}